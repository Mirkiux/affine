#cython: boundscheck=False
#cython: wraparound=False
#cython: cdivision=False
from __future__ import division

#Cython specific imports
cimport numpy as np
cimport cython

#import numpy as np
import numpy as np

np.import_array()


cdef extern from "capsule.h":
    void *Capsule_AsVoidPtr(object ptr)

# DOC: Types in use
# NOTE: This is taken from statsmodels statespace code
{{py:
TYPES = {
    "s": ("np.float32_t", "np.float32", "np.NPY_FLOAT32"),
    "d": ("np.float64_t", "np.float64", "np.NPY_FLOAT64"),
    "c": ("np.complex64_t", "np.complex64", "np.NPY_COMPLEX64"),
    "z": ("np.complex128_t", "np.complex128", "np.NPY_COMPLEX128"),
}

# DOC: BLAS functions in use
BLAS_FUNCTIONS = ["gemm", "copy"]
}}

# `blas_lapack.pxd` contains typedef statements for BLAS and LAPACK functions
# NOTE: Temporary fix
#from statsmodels.src.blas_lapack cimport *
from blas_lapack cimport *

try:
    # Scipy >= 0.12.0 exposes Fortran BLAS functions directly
    from scipy.linalg.blas import cgerc
except:
    # Scipy < 0.12.0 exposes Fortran BLAS functions in the `fblas` submodule
    from scipy.linalg.blas import fblas as blas
else:
    from scipy.linalg import blas

# DOC: These ints are used for BLAS function calls
cdef int dim_one = 1
cdef int dim_zero = 0
cdef int dim_mone = -1
cdef int inc = 1
cdef int FORTRAN = 1

# dimension holders
cdef np.npy_intp dim1[1]
cdef np.npy_intp dim2[2]

# DOC: We are creating a function for each of the four numpy types
{{for prefix, types in TYPES.items()}}
{{py:cython_type, dtype, ctype = types}}

# DOC: Set up appropriate pointers to blas functions
{{for function in BLAS_FUNCTIONS}}
{{py: name = prefix + function}}
cdef {{name}}_t *{{name}} = <{{name}}_t*>Capsule_AsVoidPtr(blas.{{name}}._cpointer)
{{endfor}}

# DOC: This is the numpy type for this function definition
ctypedef {{cython_type}} {{prefix}}DTYPE_t

# DOC: Scalars used for BLAS calls
cdef {{prefix}}DTYPE_t {{prefix}}scalar_one = 1
cdef {{prefix}}DTYPE_t {{prefix}}scalar_zero = 0
cdef {{prefix}}DTYPE_t {{prefix}}scalar_mone = -1
cdef {{prefix}}DTYPE_t {{prefix}}scalar_half = 1 / 2


@cython.boundscheck(False)
@cython.wraparound(False)
@cython.cdivision(False)
def {{prefix}}gen_pred_coef(
    unsigned int max_mat,
    np.ndarray[{{prefix}}DTYPE_t, ndim=2, mode="fortran"] lam_0,
    np.ndarray[{{prefix}}DTYPE_t, ndim=2, mode="fortran"] lam_1,
    np.ndarray[{{prefix}}DTYPE_t, ndim=2, mode="fortran"] delta_0,
    np.ndarray[{{prefix}}DTYPE_t, ndim=2, mode="fortran"] delta_1,
    np.ndarray[{{prefix}}DTYPE_t, ndim=2, mode="fortran"] mu,
    np.ndarray[{{prefix}}DTYPE_t, ndim=2, mode="fortran"] phi,
    np.ndarray[{{prefix}}DTYPE_t, ndim=2, mode="fortran"] sigma):
    """
    Returns tuple of arrays
    Generates prediction coefficient vectors A and B

    Parameters
    ----------
    max_mat : the maximum maturity to be calculated
    lam_0 : numpy array
    lam_1 : numpy array
    delta_0 : numpy array
    delta_1 : numpy array
    mu : numpy array
    phi : numpy array
    sigma : numpy array

    Returns
    -------
    a_solve : numpy array
        Array of constants relating factors to yields
    b_solve : numpy array
        Array of coeffiencts relating factors to yields
    """
    cdef unsigned int mat
    cdef unsigned int max_mat_m1 = max_mat - 1

    #sizes needed
    cdef int factors = mu.shape[dim_zero]
    cdef int mu_size = mu.size
    cdef int factors_sqr = phi.size

    # generate predictions arrays
    dim2[:] = [max_mat, 1]
    cdef np.ndarray[{{prefix}}DTYPE_t, ndim=2, mode="fortran"] a_pre = \
        np.PyArray_EMPTY(2, dim2, {{ctype}}, FORTRAN)
    dim2[:] = [max_mat, factors]
    cdef np.ndarray[{{prefix}}DTYPE_t, ndim=2, mode="fortran"] b_pre = \
        np.PyArray_EMPTY(2, dim2, {{ctype}}, FORTRAN)

    cdef np.ndarray[{{prefix}}DTYPE_t, ndim=2, mode="fortran"] n_inv = \
        np.asfortranarray(1 / np.add(range(max_mat), 1).reshape((max_mat, 1)),
                          {{dtype}})

    a_pre[dim_zero] = -delta_0
    b_pre[dim_zero] = -delta_1[:,dim_zero]

    dim1[:] = [factors]
    cdef np.ndarray[{{prefix}}DTYPE_t, ndim=1, mode="fortran"] b_el_holder = \
        np.PyArray_EMPTY(1, dim1, {{ctype}}, FORTRAN)
    dim2[:] = [factors, dim_one]
    cdef np.ndarray[{{prefix}}DTYPE_t, ndim=2, mode="fortran"] mu_sigma_lam0 = \
        np.PyArray_EMPTY(2, dim2, {{ctype}}, FORTRAN)
    cdef np.ndarray[{{prefix}}DTYPE_t, ndim=2, mode="fortran"] b_pre_prep = \
        np.PyArray_EMPTY(2, dim2, {{ctype}}, FORTRAN)
    dim1[:] = [dim_one]
    cdef np.ndarray[{{prefix}}DTYPE_t, ndim=1, mode="fortran"] \
        a_b_mu_sig_lam = np.PyArray_EMPTY(1, dim1, {{ctype}}, FORTRAN)
    dim2[:] = [dim_one, factors]
    cdef np.ndarray[{{prefix}}DTYPE_t, ndim=2, mode="fortran"] b_sig = \
        np.PyArray_EMPTY(2, dim2, {{ctype}}, FORTRAN)
    cdef np.ndarray[{{prefix}}DTYPE_t, ndim=2, mode="fortran"] b_sig_sig = \
        np.PyArray_EMPTY(2, dim2, {{ctype}}, FORTRAN)
    dim2[:] = [dim_one, dim_one]
    cdef np.ndarray[{{prefix}}DTYPE_t, ndim=2, mode="fortran"] half_b_sig_sig_b_delta = \
        np.PyArray_EMPTY(2, dim2, {{ctype}}, FORTRAN)
    dim2[:] = [factors, factors]
    cdef np.ndarray[{{prefix}}DTYPE_t, ndim=2, mode="fortran"] phi_sigma_lam_1 = \
        np.PyArray_EMPTY(2, dim2, {{ctype}}, FORTRAN)

    for mat in range(max_mat_m1):
        # Set next value of a
        #NOTE: set these to arrays to be referenced uniquely
        np.PyArray_CopyInto(b_el_holder, b_pre[mat])
        np.PyArray_CopyInto(a_b_mu_sig_lam, a_pre[mat])

        # This creates a filler array that initially has values of mu
        {{prefix}}copy(&mu_size, &mu[dim_zero, dim_zero], &inc,
                       &mu_sigma_lam0[dim_zero, dim_zero], &inc)
        # This creates a filler array that initially has values of delta_0
        {{prefix}}copy(&dim_one, &delta_0[dim_zero, dim_zero], &inc,
                       &half_b_sig_sig_b_delta[dim_zero, dim_zero], &inc)


        # DOC: Calcualte a_pre
        {{prefix}}gemm("N", "N", &factors, &dim_one, &factors,
                       &{{prefix}}scalar_mone, &sigma[dim_zero, dim_zero],
                       &factors, &lam_0[dim_zero, dim_zero], &factors,
                       &{{prefix}}scalar_one,
                       &mu_sigma_lam0[dim_zero, dim_zero], &factors)
        {{prefix}}gemm("T", "N", &dim_one, &dim_one, &factors,
                       &{{prefix}}scalar_one, &b_el_holder[dim_zero], &factors,
                       &mu_sigma_lam0[dim_zero, dim_zero], &factors,
                       &{{prefix}}scalar_one, &a_b_mu_sig_lam[dim_zero],
                       &dim_one)

        {{prefix}}gemm("T", "N", &dim_one, &factors, &factors,
                       &{{prefix}}scalar_one, &b_el_holder[dim_zero], &factors,
                       &sigma[dim_zero, dim_zero], &factors,
                       &{{prefix}}scalar_zero, &b_sig[dim_zero, dim_zero],
                       &dim_one)
        {{prefix}}gemm("N", "T", &dim_one, &factors, &factors,
                       &{{prefix}}scalar_one, &b_sig[dim_zero, dim_zero],
                       &dim_one, &sigma[dim_zero, dim_zero], &factors,
                       &{{prefix}}scalar_zero, &b_sig_sig[dim_zero, dim_zero],
                       &dim_one)
        {{prefix}}gemm("N", "N", &dim_one, &dim_one, &factors,
                       &{{prefix}}scalar_half, &b_sig_sig[dim_zero, dim_zero],
                       &dim_one, &b_el_holder[dim_zero], &factors,
                       &{{prefix}}scalar_mone,
                       &half_b_sig_sig_b_delta[dim_zero, dim_zero], &dim_one)
        a_pre[mat + 1] = a_b_mu_sig_lam[dim_zero] + \
                         half_b_sig_sig_b_delta[dim_zero, dim_zero]

        # DOC: Calcualte b_pre
        # Filler array that has initial values of phi
        {{prefix}}copy(&factors_sqr, &phi[dim_zero, dim_zero], &inc, &phi_sigma_lam_1[dim_zero, dim_zero],
                       &inc)
        # Filler array that has initial value of delta_1
        {{prefix}}copy(&factors, &delta_1[dim_zero, dim_zero], &inc, &b_pre_prep[dim_zero, dim_zero], &inc)
        # set next value of b
        {{prefix}}gemm("N", "N", &factors, &factors, &factors,
                       &{{prefix}}scalar_mone, &sigma[dim_zero, dim_zero], &factors,
                       &lam_1[dim_zero, dim_zero], &factors, &{{prefix}}scalar_one,
                       &phi_sigma_lam_1[dim_zero, dim_zero], &factors)
        {{prefix}}gemm("T", "N", &factors, &dim_one, &factors,
                       &{{prefix}}scalar_one, &phi_sigma_lam_1[dim_zero, dim_zero], &factors,
                       &b_el_holder[dim_zero], &factors, &{{prefix}}scalar_mone,
                       &b_pre_prep[dim_zero, dim_zero], &factors)
        b_pre[mat + 1] = b_pre_prep[:, dim_zero]

    return np.multiply(-a_pre, n_inv), np.multiply(-b_pre, n_inv)

{{endfor}}
